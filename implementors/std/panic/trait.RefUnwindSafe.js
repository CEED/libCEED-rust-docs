(function() {var implementors = {};
implementors["ex1_volume"] = [{"text":"impl RefUnwindSafe for Opt","synthetic":true,"types":[]}];
implementors["ex2_surface"] = [{"text":"impl RefUnwindSafe for Opt","synthetic":true,"types":[]}];
implementors["libceed"] = [{"text":"impl&lt;'a&gt; RefUnwindSafe for BasisOpt&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Basis&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ElemRestrictionOpt&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ElemRestriction&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Operator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for CompositeOperator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for QFunctionOpt&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for QFunction&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for QFunctionByName&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for VectorOpt&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Vector&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for VectorView&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for VectorViewMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MemType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NormType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TransposeMode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for QuadMode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ElemTopology","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EvalMode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CeedError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CeedErrorHandler","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ceed","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()